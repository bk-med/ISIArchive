{"ast":null,"code":"import { appendErrors as r } from \"react-hook-form\";\nimport { validateFieldsNatively as e, toNestError as o } from \"@hookform/resolvers\";\nvar n = function (e, o) {\n    for (var n = {}; e.length;) {\n      var s = e[0],\n        t = s.code,\n        i = s.message,\n        a = s.path.join(\".\");\n      if (!n[a]) if (\"unionErrors\" in s) {\n        var u = s.unionErrors[0].errors[0];\n        n[a] = {\n          message: u.message,\n          type: u.code\n        };\n      } else n[a] = {\n        message: i,\n        type: t\n      };\n      if (\"unionErrors\" in s && s.unionErrors.forEach(function (r) {\n        return r.errors.forEach(function (r) {\n          return e.push(r);\n        });\n      }), o) {\n        var c = n[a].types,\n          f = c && c[s.code];\n        n[a] = r(a, o, n, t, f ? [].concat(f, s.message) : s.message);\n      }\n      e.shift();\n    }\n    return n;\n  },\n  s = function (r, s, t) {\n    return void 0 === t && (t = {}), function (i, a, u) {\n      try {\n        return Promise.resolve(function (o, n) {\n          try {\n            var a = Promise.resolve(r[\"sync\" === t.mode ? \"parse\" : \"parseAsync\"](i, s)).then(function (r) {\n              return u.shouldUseNativeValidation && e({}, u), {\n                errors: {},\n                values: t.rawValues ? i : r\n              };\n            });\n          } catch (r) {\n            return n(r);\n          }\n          return a && a.then ? a.then(void 0, n) : a;\n        }(0, function (r) {\n          return {\n            values: {},\n            errors: r.isEmpty ? {} : o(n(r.errors, !u.shouldUseNativeValidation && \"all\" === u.criteriaMode), u)\n          };\n        }));\n      } catch (r) {\n        return Promise.reject(r);\n      }\n    };\n  };\nexport { s as zodResolver };","map":{"version":3,"names":["n","parseErrorSchema","e","o","length","s","t","code","i","message","a","path","join","u","unionErrors","errors","type","forEach","r","push","c","types","f","concat","shift","zodResolver","Promise","resolve","mode","then","shouldUseNativeValidation","values","rawValues","isEmpty","criteriaMode","reject"],"sources":["/Users/brahimkhalilkhalef/Projects/ISIArchive/frontend/node_modules/@hookform/resolvers/zod/src/zod.ts"],"sourcesContent":["import {\n  appendErrors,\n  FieldError,\n  FieldErrors,\n} from 'react-hook-form';\nimport { z } from 'zod';\nimport { toNestError, validateFieldsNatively } from '@hookform/resolvers';\nimport type { Resolver } from './types';\n\nconst parseErrorSchema = (\n  zodErrors: z.ZodIssue[],\n  validateAllFieldCriteria: boolean,\n) => {\n  const errors: Record<string, FieldError> = {};\n  for (; zodErrors.length;) {\n    const error = zodErrors[0];\n    const { code, message, path } = error;\n    const _path = path.join('.');\n\n    if (!errors[_path]) {\n      if ('unionErrors' in error) {\n        const unionError = error.unionErrors[0].errors[0];\n\n        errors[_path] = {\n          message: unionError.message,\n          type: unionError.code,\n        };\n      } else {\n        errors[_path] = { message, type: code };\n      }\n    }\n\n    if ('unionErrors' in error) {\n      error.unionErrors.forEach((unionError) =>\n        unionError.errors.forEach((e) => zodErrors.push(e)),\n      );\n    }\n\n    if (validateAllFieldCriteria) {\n      const types = errors[_path].types;\n      const messages = types && types[error.code];\n\n      errors[_path] = appendErrors(\n        _path,\n        validateAllFieldCriteria,\n        errors,\n        code,\n        messages\n          ? ([] as string[]).concat(messages as string[], error.message)\n          : error.message,\n      ) as FieldError;\n    }\n\n    zodErrors.shift();\n  }\n\n  return errors;\n};\n\nexport const zodResolver: Resolver =\n  (schema, schemaOptions, resolverOptions = {}) =>\n    async (values, _, options) => {\n      try {\n        const data = await schema[\n          resolverOptions.mode === 'sync' ? 'parse' : 'parseAsync'\n        ](values, schemaOptions);\n\n        options.shouldUseNativeValidation && validateFieldsNatively({}, options);\n\n        return {\n          errors: {} as FieldErrors,\n          values: resolverOptions.rawValues ? values : data,\n        };\n      } catch (error: any) {\n        return {\n          values: {},\n          errors: error.isEmpty\n            ? {}\n            : toNestError(\n              parseErrorSchema(\n                error.errors,\n                !options.shouldUseNativeValidation &&\n                options.criteriaMode === 'all',\n              ),\n              options,\n            ),\n        };\n      }\n    };\n"],"mappings":";;AASA,IAAMA,CAAA,GAAmB,SAAAC,CACvBC,CAAA,EACAC,CAAA;IAGA,KADA,IAAMH,CAAA,GAAqC,IACpCE,CAAA,CAAUE,MAAA,GAAS;MACxB,IAAMC,CAAA,GAAQH,CAAA,CAAU;QAChBI,CAAA,GAAwBD,CAAA,CAAxBE,IAAA;QAAMC,CAAA,GAAkBH,CAAA,CAAlBI,OAAA;QACRC,CAAA,GAD0BL,CAAA,CAATM,IAAA,CACJC,IAAA,CAAK;MAExB,KAAKZ,CAAA,CAAOU,CAAA,GACV,IAAI,iBAAiBL,CAAA,EAAO;QAC1B,IAAMQ,CAAA,GAAaR,CAAA,CAAMS,WAAA,CAAY,GAAGC,MAAA,CAAO;QAE/Cf,CAAA,CAAOU,CAAA,IAAS;UACdD,OAAA,EAASI,CAAA,CAAWJ,OAAA;UACpBO,IAAA,EAAMH,CAAA,CAAWN;QAAA;MAAA,OAGnBP,CAAA,CAAOU,CAAA,IAAS;QAAED,OAAA,EAAAD,CAAA;QAASQ,IAAA,EAAMV;MAAA;MAUrC,IANI,iBAAiBD,CAAA,IACnBA,CAAA,CAAMS,WAAA,CAAYG,OAAA,CAAQ,UAACC,CAAA;QAAA,OACzBA,CAAA,CAAWH,MAAA,CAAOE,OAAA,CAAQ,UAACC,CAAA;UAAA,OAAMhB,CAAA,CAAUiB,IAAA,CAAKD,CAAA;QAAA;MAAA,IAIhDf,CAAA,EAA0B;QAC5B,IAAMiB,CAAA,GAAQpB,CAAA,CAAOU,CAAA,EAAOW,KAAA;UACtBC,CAAA,GAAWF,CAAA,IAASA,CAAA,CAAMf,CAAA,CAAME,IAAA;QAEtCP,CAAA,CAAOU,CAAA,IAASQ,CAAA,CACdR,CAAA,EACAP,CAAA,EACAH,CAAA,EACAM,CAAA,EACAgB,CAAA,GACK,GAAgBC,MAAA,CAAOD,CAAA,EAAsBjB,CAAA,CAAMI,OAAA,IACpDJ,CAAA,CAAMI,OAAA;MAAA;MAIdP,CAAA,CAAUsB,KAAA;IAAA;IAGZ,OAAOxB,CAAA;EAAA;EAGIK,CAAA,GACX,SAAAoB,CAACP,CAAA,EAAQb,CAAA,EAAeC,CAAA;IAAA,kBAAAA,CAAA,KAAAA,CAAA,GAAkB,eACjCE,CAAA,EAAQE,CAAA,EAAGG,CAAA;MAAA;QAAA,OAAAa,OAAA,CAAAC,OAAA,WAAAxB,CAAA,EAAAH,CAAA;UAAA;YAAA,IAAAU,CAAA,GAAAgB,OAAA,CAAAC,OAAA,CAEKT,CAAA,CACQ,WAAzBZ,CAAA,CAAgBsB,IAAA,GAAkB,UAAU,cAC5CpB,CAAA,EAAQH,CAAA,GAAAwB,IAAA,WAFJX,CAAA;cAMN,OAFAL,CAAA,CAAQiB,yBAAA,IAA6B5B,CAAA,CAAuB,IAAIW,CAAA,GAEzD;gBACLE,MAAA,EAAQ;gBACRgB,MAAA,EAAQzB,CAAA,CAAgB0B,SAAA,GAAYxB,CAAA,GAASU;cAAA;YAAA;UAAA,SAAAA,CAAA;YAAA,OAAAlB,CAAA,CAAAkB,CAAA;UAAA;UAAA,OAAAR,CAAA,IAAAA,CAAA,CAAAmB,IAAA,GAAAnB,CAAA,CAAAmB,IAAA,SAAA7B,CAAA,IAAAU,CAAA;QAAA,eAExCQ,CAAA;UACP,OAAO;YACLa,MAAA,EAAQ;YACRhB,MAAA,EAAQG,CAAA,CAAMe,OAAA,GACV,KACA9B,CAAA,CACAH,CAAA,CACEkB,CAAA,CAAMH,MAAA,GACLF,CAAA,CAAQiB,yBAAA,IACgB,UAAzBjB,CAAA,CAAQqB,YAAA,GAEVrB,CAAA;UAAA;QAAA;MAAA,CAxBZ,QAAAK,CAAA;QAAA,OAAAQ,OAAA,CAAAS,MAAA,CAAAjB,CAAA;MAAA;IAAA;EAAA;AAAA,SAAAb,CAAA,IAAAoB,WAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}