
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.16.2
 * Query Engine version: 4bc8b6e1b66cb932731fb1bdbbc550d1e010de81
 */
Prisma.prismaVersion = {
  client: "4.16.2",
  engine: "4bc8b6e1b66cb932731fb1bdbbc550d1e010de81"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  prenom: 'prenom',
  nom: 'nom',
  role: 'role',
  isActive: 'isActive',
  filiereId: 'filiereId',
  niveauId: 'niveauId',
  resetToken: 'resetToken',
  resetTokenExpiry: 'resetTokenExpiry',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NiveauScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  type: 'type',
  ordre: 'ordre'
};

exports.Prisma.FiliereScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  code: 'code',
  niveauId: 'niveauId',
  isDeleted: 'isDeleted',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt'
};

exports.Prisma.SemestreScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  niveauId: 'niveauId',
  ordre: 'ordre'
};

exports.Prisma.MatiereScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  code: 'code',
  filiereId: 'filiereId',
  semestreId: 'semestreId',
  isDeleted: 'isDeleted',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt'
};

exports.Prisma.ProfesseurMatiereScalarFieldEnum = {
  id: 'id',
  professeurId: 'professeurId',
  matiereId: 'matiereId',
  role: 'role',
  createdAt: 'createdAt'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  titre: 'titre',
  description: 'description',
  cheminFichier: 'cheminFichier',
  nomFichier: 'nomFichier',
  tailleFichier: 'tailleFichier',
  typeMime: 'typeMime',
  categorie: 'categorie',
  matiereId: 'matiereId',
  telchargePar: 'telchargePar',
  correctionId: 'correctionId',
  downloadCount: 'downloadCount',
  viewCount: 'viewCount',
  isDeleted: 'isDeleted',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DocumentPFEScalarFieldEnum = {
  id: 'id',
  documentId: 'documentId',
  anneeDiplome: 'anneeDiplome',
  filiereDiplome: 'filiereDiplome',
  titreProjet: 'titreProjet',
  resume: 'resume',
  motsCles: 'motsCles',
  createdAt: 'createdAt'
};

exports.Prisma.CommentaireScalarFieldEnum = {
  id: 'id',
  contenu: 'contenu',
  documentId: 'documentId',
  userId: 'userId',
  parentId: 'parentId',
  isDeleted: 'isDeleted',
  deletedAt: 'deletedAt',
  deletedBy: 'deletedBy',
  isEdited: 'isEdited',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  resource: 'resource',
  resourceId: 'resourceId',
  details: 'details',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.DocumentMatiereScalarFieldEnum = {
  id: 'id',
  documentId: 'documentId',
  matiereId: 'matiereId',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = {
  etudiant: 'etudiant',
  professeur: 'professeur',
  admin: 'admin'
};

exports.NiveauType = {
  licence: 'licence',
  master: 'master',
  ingenieur: 'ingenieur'
};

exports.ProfesseurRole = {
  cours: 'cours',
  td: 'td',
  tp: 'tp'
};

exports.DocumentCategorie = {
  cours: 'cours',
  td: 'td',
  tp: 'tp',
  examen: 'examen',
  pfe: 'pfe'
};

exports.AuditAction = {
  LOGIN: 'LOGIN',
  LOGOUT: 'LOGOUT',
  DOCUMENT_VIEW: 'DOCUMENT_VIEW',
  DOCUMENT_DOWNLOAD: 'DOCUMENT_DOWNLOAD',
  DOCUMENT_UPLOAD: 'DOCUMENT_UPLOAD',
  DOCUMENT_UPDATE: 'DOCUMENT_UPDATE',
  DOCUMENT_DELETE: 'DOCUMENT_DELETE',
  DOCUMENT_RESTORE: 'DOCUMENT_RESTORE',
  COMMENT_CREATE: 'COMMENT_CREATE',
  COMMENT_UPDATE: 'COMMENT_UPDATE',
  COMMENT_DELETE: 'COMMENT_DELETE',
  USER_CREATE: 'USER_CREATE',
  USER_UPDATE: 'USER_UPDATE',
  USER_DELETE: 'USER_DELETE',
  FILIERE_CREATE: 'FILIERE_CREATE',
  FILIERE_UPDATE: 'FILIERE_UPDATE',
  FILIERE_DELETE: 'FILIERE_DELETE',
  FILIERE_RESTORE: 'FILIERE_RESTORE',
  MATIERE_CREATE: 'MATIERE_CREATE',
  MATIERE_UPDATE: 'MATIERE_UPDATE',
  MATIERE_DELETE: 'MATIERE_DELETE',
  MATIERE_RESTORE: 'MATIERE_RESTORE',
  PAGE_ACCESS: 'PAGE_ACCESS',
  PROFILE_UPDATE: 'PROFILE_UPDATE',
  PASSWORD_CHANGE: 'PASSWORD_CHANGE',
  DASHBOARD_VIEW: 'DASHBOARD_VIEW'
};

exports.Prisma.ModelName = {
  User: 'User',
  Niveau: 'Niveau',
  Filiere: 'Filiere',
  Semestre: 'Semestre',
  Matiere: 'Matiere',
  ProfesseurMatiere: 'ProfesseurMatiere',
  Document: 'Document',
  DocumentPFE: 'DocumentPFE',
  Commentaire: 'Commentaire',
  AuditLog: 'AuditLog',
  DocumentMatiere: 'DocumentMatiere'
};

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
